
    <canvas class="js-core-load" id="core_load" width="1000px" height="100"></canvas>

    <script>

      var opts = {maxValue: 100, minValue:0, millisPerPixel:80,grid:{strokeStyle:'transparent'}, labels:{disabled:true}},
          chart = new SmoothieChart(opts),
          colors = [
            'F57900', 'CC0000','4E9A06','204A87'
          ],
          loads = {};

      chart.streamTo($('#core_load')[0], 1000);

      socket.on('cpu-load', function (data) {

        _.each(data, function(core, key){

          if(!loads[key]){
            loads[key] = new TimeSeries();

            chart.addTimeSeries(loads[key], {lineWidth:2,strokeStyle:'#'+colors[key]});
          }

          if(loads[key]){
            loads[key].append(new Date().getTime(), core);
          }

        })
      });
    </script>



    <br/>
    <br/>
    <br/>
    Average load:<span class="js-loadavg"></span><br/>
    <br/>
    Disk space: <span class="js-mem"></span>
    <br>
    Processes:<br/>
    <span class="js-ps"></span>
    <br/><br/>
    <div id="js-mem-mem" style="width:200px; height:200px; float:left;"></div>
    <div id="js-mem-ram-only" style="width:200px; height:200px; float:left;"></div>
    <div id="js-mem-cache" style="width:200px; height:200px; float:left;"></div>
    <div id="js-mem-swap" style="width:200px; height:200px; float:left;"></div>
    <br/><br/>

<script>

    var memMem, memRamOnly, memSwap, memCache = false;
    socket.on('overall-info', function (data) {
      if(!memMem){
        memMem = new JustGage({
          id: "js-mem-mem", 
          value: 0,
          min: 0,
          max: data.mem.mem[0],
          title: "RAM used by kernel",
          label: "Mb"
        });
      }

      if(!memRamOnly){
        memRamOnly = new JustGage({
          id: "js-mem-ram-only", 
          value: 0,
          min: 0,
          max: data.mem.mem[0],
          title: "RAM used by processes",
          label: "Mb"
        });
      }

      if(!memCache){
        memCache = new JustGage({
          id: "js-mem-cache", 
          value: 0,
          min: 0,
          max: data.mem.mem[0],
          title: "RAM used by cache/buff",
          label: "Mb"
        });
      }

      if(!memSwap){
        memSwap = new JustGage({
          id: "js-mem-swap", 
          value: 0,
          min: 0,
          max: data.mem.swap[0],
          title: "SWAP used",
          label: "Mb"
        });
      }

      memRamOnly.refresh(data.mem.mem[1] - data.mem.cachebuff[1]);
      memCache.refresh(data.mem.cachebuff[1]);
      memSwap.refresh(data.mem.swap[1]);
      memMem.refresh(data.mem.mem[1]);

      $('.js-loadavg').text(data.sys.loadavg.join(' '));
      $('.js-mem').html(data.df.join('<br/>'));
      $('.js-ps').html(data.ps.join('<br/>'));

    });

    </script>